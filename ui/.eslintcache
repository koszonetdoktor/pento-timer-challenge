[{"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/index.tsx":"1","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/services/useTrackings.tsx":"2","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/Button.tsx":"3","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/App.tsx":"4","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/TimeRecorder.tsx":"5","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/Loading.tsx":"6","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/services/trackingService.ts":"7","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/TrackedTimeList/TrackedTimeList.tsx":"8"},{"size":311,"mtime":1608799820526,"results":"9","hashOfConfig":"10"},{"size":1179,"mtime":1608895581331,"results":"11","hashOfConfig":"10"},{"size":1330,"mtime":1608799493090,"results":"12","hashOfConfig":"10"},{"size":1430,"mtime":1608801321692,"results":"13","hashOfConfig":"10"},{"size":1369,"mtime":1608802314695,"results":"14","hashOfConfig":"10"},{"size":790,"mtime":1608899656901,"results":"15","hashOfConfig":"10"},{"size":349,"mtime":1608895279701,"results":"16","hashOfConfig":"10"},{"size":3631,"mtime":1608980765468,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5o20y",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/index.tsx",[],"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/services/useTrackings.tsx",[],"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/Button.tsx",[],"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/App.tsx",[],"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/TimeRecorder.tsx",["35","36"],"import React, { Fragment, useState } from \"react\"\nimport Timer from \"./Timer\"\nimport Saver from \"./Saver\"\nimport { ProgressStates, Tracking } from \"../types\"\nimport { saveTracking } from \"../services/trackingService\"\n\ntype Props = {\n    onRecorded: (tracking: Tracking) => void\n}\n\nexport default function TimeRecorder({ onRecorded }: Props) {\n    const [measuredTime, setMeasuredTime] = useState<number>(0)\n    const [savingProgress, setSavingProgress] = useState<ProgressStates>(\n        \"ideal\"\n    )\n\n    const handleSave = async (name: string) => {\n        try {\n            setSavingProgress(\"loading\")\n            const { id, ts } = await saveTracking(name, measuredTime)\n            onRecorded({\n                name,\n                duration: measuredTime,\n                id: `${Math.random()}`, //TODO from backend\n                ts: Date.now(), //TODO from backend\n            })\n            setSavingProgress(\"ideal\")\n        } catch {\n            setSavingProgress(\"error\")\n        }\n    }\n\n    return (\n        <Fragment>\n            <Timer\n                value={measuredTime}\n                onChange={(value: number) => setMeasuredTime(value)}\n            />\n            <Saver\n                disabled={measuredTime === 0}\n                savingProgress={savingProgress}\n                onSave={handleSave}\n            />\n        </Fragment>\n    )\n}\n","/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/Loading.tsx",[],"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/services/trackingService.ts",[],"/Users/gergohalmi/Desktop/git/interviewProblems/pento-tech-challenge-time/ui/src/components/TrackedTimeList/TrackedTimeList.tsx",[],{"ruleId":"37","severity":1,"message":"38","line":20,"column":21,"nodeType":"39","messageId":"40","endLine":20,"endColumn":23},{"ruleId":"37","severity":1,"message":"41","line":20,"column":25,"nodeType":"39","messageId":"40","endLine":20,"endColumn":27},"@typescript-eslint/no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'ts' is assigned a value but never used."]